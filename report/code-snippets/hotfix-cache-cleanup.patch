# HOTFIX CR√çTICO: Limpeza Completa de Cache no Logout
# Arquivo: src/hooks/useUnifiedAuth.tsx

## PROBLEMA
O cache de assinatura no localStorage pode permanecer ap√≥s o logout, causando inconsist√™ncias
quando um novo usu√°rio faz login no mesmo dispositivo/navegador.

## CORRE√á√ÉO

### ANTES (Linha 461 - fun√ß√£o clearSubscriptionCache):
```typescript
const clearSubscriptionCache = useCallback(() => {
  if (user) {
    localStorage.removeItem(`subscription_data_${user.id}`);
    localStorage.removeItem(`subscription_last_check_${user.id}`);
  }
}, [user]);
```

### DEPOIS (Corre√ß√£o - fun√ß√£o clearSubscriptionCache melhorada):
```typescript
const clearSubscriptionCache = useCallback(() => {
  // Limpar cache do usu√°rio atual se existir
  if (user) {
    localStorage.removeItem(`subscription_data_${user.id}`);
    localStorage.removeItem(`subscription_last_check_${user.id}`);
  }
  
  // CR√çTICO: Limpar TODOS os caches de subscription no logout
  Object.keys(localStorage).forEach(key => {
    if (key.startsWith('subscription_data_') || 
        key.startsWith('subscription_last_check_') ||
        key.startsWith('auth_') ||
        key.startsWith('login_block')) {
      localStorage.removeItem(key);
    }
  });
}, [user]);
```

### ADICIONAL: Melhorar limpeza no signOut (ap√≥s linha 468):
```typescript
// Adicionar ap√≥s a linha 468 na fun√ß√£o signOut
// Clear all user-related localStorage atomically
Object.keys(localStorage).forEach(key => {
  if (key.startsWith('subscription_') || 
      key.startsWith('login_block') || 
      key.startsWith('auth_') ||
      key.startsWith('user_cache_')) {
    localStorage.removeItem(key);
  }
});
```

## IMPACTO
‚úÖ **ANTES:** Cache podia permanecer entre logins diferentes
‚úÖ **DEPOIS:** Limpeza completa e at√¥mica de todos os dados sens√≠veis

## CEN√ÅRIO DE TESTE
1. Login com usu√°rio A (com assinatura ativa)
2. Usar aplica√ß√£o, gerar cache
3. Logout
4. Login com usu√°rio B (sem assinatura)
5. **Resultado esperado:** Usu√°rio B n√£o deve herdar cache do usu√°rio A
6. **Resultado antes do fix:** Poss√≠vel acesso indevido baseado em cache obsoleto

## PRIORIDADE: üî¥ CR√çTICO
Este fix previne vazamento de estado entre sess√µes de usu√°rios diferentes.